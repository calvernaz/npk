/*jshint esversion: 6 */
"use strict";

var fs = require('fs');
var pty = require('./pty');
var hop = require('./hashcat_output_processor');

var keyspace = parseInt(fs.readFileSync('/root/keyspace'));
var instance_id = parseInt(fs.readFileSync('/root/instance_id'));
var instance_count = parseInt(fs.readFileSync('/root/instance_count'));
var instance_number = parseInt(fs.readFileSync('/root/instance_number'));
var manifest = JSON.parse(fs.readFileSync('/root/manifest.json'));

var limit = Math.ceil(keyspace / instance_count);
var skip = limit * (instance_number - 1);

var params = [
	"--quiet",
	"-O",
	"--remove",
	"--potfile-path=/potfiles/" + instance_id + ".potfile",
	"-w3",
	"-m",
	manifest.hashType,
	"-a",
	manifest.attackType,
];

if (instance_count > 1) {
	params.push("--skip");
	params.push(skip);
}

if (instance_number != instance_count) {
	params.push("--limit");
	params.push(limit);
}

if (manifest.attackType == 0) {
	manifest.rulesFiles.forEach(function(e) {
		params.push("-r");
		params.push("/root/npk-rules/*");
	});
}

params.push("/root/hashes.txt");

if ([0,6].indexOf(manifest.attackType) >= 0) {
	params.push("/root/npk-wordlist/" + fs.readdirSync("/root/npk-wordlist/")[0]);
}

if ([3,6].indexOf(manifest.attackType) >= 0) {
	params.push(manifest.mask);
}

console.log(params);

pty.createProcess(hop.readOutput, "/root/hashcat/hashcat64.bin", params).then(function(buffer, code, signal) {
	if (code == 1) {
		console.log("\n\nCracking job exited successfully.\n");
		process.exit(0);
	} else {
		console.log("\n\nDied with code " + code + " and signal " + signal + "\n");
		console.log("Dying words:");
		console.log(buffer);
		console.log("\n\n");
		process.exit(code);
	}	
});

//var output = fs.readFileSync('example_output.txt', 'utf8');

//console.log(JSON.stringify(hop.readOutput(output)));